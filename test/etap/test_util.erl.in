% Licensed under the Apache License, Version 2.0 (the "License"); you may not
% use this file except in compliance with the License. You may obtain a copy of
% the License at
%
%   http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations under
% the License.

-module(test_util).

-export([init_code_path/0]).
-export([source_file/1, build_file/1, config_files/0]).
-export([run/2]).
-export([request/3, request/4]).
-export([start_couch/0, start_couch/1, stop_couch/0]).

srcdir() ->
    "@abs_top_srcdir@".

builddir() ->
    "@abs_top_builddir@".

init_code_path() ->
    Paths = [
        "etap",
        "couchdb",
        "ejson",
        "oauth",
        "ibrowse",
        "mochiweb",
        "snappy"
    ],
    lists:foreach(fun(Name) ->
        code:add_patha(filename:join([builddir(), "src", Name]))
    end, Paths).

source_file(Name) ->
    filename:join([srcdir(), Name]).

build_file(Name) ->
    filename:join([builddir(), Name]).

config_files() ->
    [
        build_file("etc/couchdb/default_dev.ini"),
        source_file("test/random_port.ini"),
        build_file("etc/couchdb/local_dev.ini")
    ].


run(Plan, Fun) ->
    test_util:init_code_path(),
    etap:plan(Plan),
    try Fun() of
        ok ->
            etap:end_tests();
        Else ->
            etap:diag("Bad return:~n~p", [Else]),
            timer:sleep(100),
            etap:bail(Else)
    catch Type:Reason ->
        etap:diag("Test died: ~p~n  ~p~n  ~p~n",
                [Type, Reason, erlang:get_stacktrace()]),
        timer:sleep(1000),
        etap:bail({Type, Reason})
    end,
    ok.


request(Url, Headers, Method) ->
    request(Url, Headers, Method, []).

request(Url, Headers, Method, Body) ->
    request(Url, Headers, Method, Body, 3).

request(_Url, _Headers, _Method, _Body, 0) ->
    {error, request_failed};
request(Url, Headers, Method, Body, N) ->
    case code:is_loaded(ibrowse) of
    false ->
        {ok, _} = ibrowse:start();
    _ ->
        ok
    end,
    case ibrowse:send_req(Url, Headers, Method, Body) of
    {ok, Code0, RespHeaders, RespBody0} ->
        Code = list_to_integer(Code0),
        RespBody = iolist_to_binary(RespBody0),
        {ok, Code, RespHeaders, RespBody};
    {error, {'EXIT', {normal, _}}} ->
        % Connection closed right after a successful request that
        % used the same connection.
        request(Url, Headers, Method, Body, N - 1);
    Error ->
        Error
    end.

start_couch() ->
    start_couch(config_files()).

start_couch(IniFiles) ->
    ok = application:set_env(config, ini_files, test_util:config_files()),
    ok = application:start(config),
    ok = application:start(twig),
    ok = application:start(couch),
    ok.

stop_couch() ->
    ok = application:stop(couch),
    ok = application:stop(twig),
    ok = application:stop(config).
